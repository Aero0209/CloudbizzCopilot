rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Fonctions helpers
    function isAuthenticated() {
      return request.auth != null;
    }

    function emailMatches(email) {
      return request.auth.token.email == email;
    }

    function isCompanyOwner(companyId) {
      return get(/databases/$(database)/documents/companies/$(companyId)).data.ownerId == request.auth.uid;
    }

    function isCompanyMember(companyId) {
      let company = get(/databases/$(database)/documents/companies/$(companyId)).data;
      return company.users.hasAny([{'userId': request.auth.uid}]);
    }

    function isMaster() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'master';
    }

    // Règles pour la collection users
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == userId ||
        exists(/databases/$(database)/documents/companies/$(request.resource.data.companyId))
      );
    }
    
    // Règles pour la collection companies
    match /companies/{companyId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        isCompanyOwner(companyId) ||
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['users', 'services', 'monthlyRevenue']) ||
        isMaster()
      );
      allow delete: if isAuthenticated() && (isCompanyOwner(companyId) || isMaster());
    }
    
    // Règles pour la collection services
    match /services/{serviceId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isMaster();
    }

    // Règles pour la collection userServices
    match /userServices/{userServiceId} {
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        resource.data.companyId == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'master'
      );
      allow write: if request.auth != null;
    }
    
    // Règles pour la collection invitations
    match /invitations/{invitationId} {
      allow read: if true;
      allow create: if isAuthenticated() && (
        isCompanyOwner(request.resource.data.companyId) ||
        isMaster()
      );
      allow update: if isAuthenticated() && (
        isCompanyOwner(resource.data.companyId) ||
        (resource.data.email == request.auth.token.email && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status'])) ||
        isMaster()
      );
      allow delete: if isAuthenticated() && (
        isCompanyOwner(resource.data.companyId) ||
        resource.data.email == request.auth.token.email ||
        isMaster()
      );
    }
    
    // Règles pour la collection orders
    match /orders/{orderId} {
      allow read: if isAuthenticated() && (
        resource.data.customer.userId == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'master'
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        isMaster() ||
        (resource.data.customer.userId == request.auth.uid && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['metadata']))
      );
      
      // Sous-collection history
      match /history/{historyId} {
        allow read: if isAuthenticated() && (
          get(/databases/$(database)/documents/orders/$(orderId)).data.customer.userId == request.auth.uid ||
          isMaster()
        );
        allow write: if isAuthenticated() && (
          get(/databases/$(database)/documents/orders/$(orderId)).data.customer.userId == request.auth.uid ||
          isMaster()
        );
      }
    }

    // Règles pour la collection notifications
    match /notifications/{notificationId} {
      allow read: if request.auth != null && 
        resource.data.userId == request.auth.uid;
      allow write: if false;  // Seules les fonctions Cloud peuvent créer/modifier
    }

    // Allow read/write access to all users under any document
    match /{document=**} {
      allow read, write: if true;
    }
  }
} 